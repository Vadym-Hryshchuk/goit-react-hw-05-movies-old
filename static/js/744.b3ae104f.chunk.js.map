{"version":3,"file":"static/js/744.b3ae104f.chunk.js","mappings":"uNAGaA,EAAYC,EAAAA,GAAAA,GAAH,gSAYTC,EAAYD,EAAAA,GAAAA,GAAH,0WAYTE,EAAiBF,EAAAA,GAAAA,IAAH,qFAKdG,GAAaH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,gIAOVK,EAAQL,EAAAA,GAAAA,EAAH,uD,kBC5BH,SAASM,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAC5BC,GAAWC,EAAAA,EAAAA,MASjB,OACE,SAACV,EAAD,UACGQ,EAAOG,KAAI,gBATEC,EASCC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,YAApB,OACV,SAACd,EAAD,WACE,UAACE,EAAD,CAAYa,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMV,GAAhD,WACE,SAACN,EAAD,CAAgBiB,KAZRR,EAYuBI,EAXlCJ,EAGC,oCAAN,OAA2CA,GAFlCS,GAU4CC,IAAG,OAAER,QAAF,IAAEA,EAAAA,EAASC,KAC3D,SAACT,EAAD,iBAAQQ,QAAR,IAAQA,EAAAA,EAASC,QAHLF,U,oLCxBlBU,EAAU,mCACVC,EAAW,+BAAjB,SAEeC,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,uFACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,gCAGYD,EAASE,OAHrB,+CAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,0GAOO,SAASC,IACd,OAAOT,EAAW,GAAD,OAAID,EAAJ,wCAA4CD,IAGxD,SAASY,EAAaC,EAAOC,GAClC,OAAOZ,EAAW,GAAD,OACZD,EADY,iCACqBD,EADrB,iCACqDa,EADrD,iBACmEC,EADnE,yBAKZ,SAASC,EAAgBzB,GAC9B,OAAOY,EAAW,GAAD,OACZD,EADY,kBACMX,EADN,oBACoBU,EADpB,oBAKZ,SAASgB,EAAgB1B,GAC9B,OAAOY,EAAW,GAAD,OACZD,EADY,kBACMX,EADN,4BAC4BU,EAD5B,oBAKZ,SAASiB,EAAgB3B,GAAe,IAAXwB,EAAU,uDAAH,EACzC,OAAOZ,EAAW,GAAD,OACZD,EADY,kBACMX,EADN,4BAC4BU,EAD5B,gCAC2Dc,M,kHC7B/D,SAASI,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOlC,EAAP,KAAemC,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRnB,EAAAA,KAA8BoB,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACpCH,EAAUG,QAEX,KAGD,+BACE,SAAC,IAAD,CAAWtC,OAAQA,Q","sources":["components/ListMovie/ListMovie.styled.jsx","components/ListMovie/ListMovie.jsx","services/fetchMovieAPI.js","views/HomePage.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(187px, 1fr));\n  grid-gap: 16px;\n  margin-bottom: 10px;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  position: reletive;\n`;\nexport const MovieItem = styled.li`\n  font-size: 16px;\n  color: rgba(0, 87, 184, 0.7);\n  text-align: center;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\nexport const MovieItemImage = styled.img`\n  display: block;\n  max-width: 100%;\n  object-fit: cover;\n`;\nexport const LinkStyled = styled(Link)`\n  text-decoration: none;\n  color: currentColor;\n  &:hover {\n    color: rgba(255, 215, 0, 0.7);\n  }\n`;\nexport const Title = styled.p`\n  margin: 0;\n  padding: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  LinkStyled,\n  MovieItem,\n  MovieItemImage,\n  MovieList,\n  Title,\n} from './ListMovie.styled';\nimport defaultPoster from '../../defaultData/defaultPoster.jpg';\n\nexport default function ListMovie({ movies }) {\n  const location = useLocation();\n\n  const createSRC = posterPath => {\n    if (!posterPath) {\n      return defaultPoster;\n    }\n    return `https://image.tmdb.org/t/p/w500//${posterPath}`;\n  };\n\n  return (\n    <MovieList>\n      {movies.map(({ id, title, name, poster_path }) => (\n        <MovieItem key={id}>\n          <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n            <MovieItemImage src={createSRC(poster_path)} alt={title ?? name} />\n            <Title>{title ?? name}</Title>\n          </LinkStyled>\n        </MovieItem>\n      ))}\n    </MovieList>\n  );\n}\n\nListMovie.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  poster_path: PropTypes.string,\n};\n","const API_KEY = 'a8667995004f1618098a3acfcfde7ac0';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nasync function fetchMovie(url) {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function getTrendingMovie() {\n  return fetchMovie(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n}\n\nexport function searchMovies(query, page) {\n  return fetchMovie(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`,\n  );\n}\n\nexport function getMovieDetails(id) {\n  return fetchMovie(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`,\n  );\n}\n\nexport function getMovieCredits(id) {\n  return fetchMovie(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`,\n  );\n}\n\nexport function getMovieReviews(id, page = 1) {\n  return fetchMovie(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`,\n  );\n}\n","import { useEffect, useState } from 'react';\n\nimport * as fetchMovie from '../services/fetchMovieAPI';\nimport ListMovie from '../components/ListMovie/ListMovie';\n\nexport default function HomePage() {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetchMovie.getTrendingMovie().then(({ results }) => {\n      setMovies(results);\n    });\n  }, []);\n\n  return (\n    <>\n      <ListMovie movies={movies} />\n    </>\n  );\n}\n"],"names":["MovieList","styled","MovieItem","MovieItemImage","LinkStyled","Link","Title","ListMovie","movies","location","useLocation","map","posterPath","id","title","name","poster_path","to","state","from","src","defaultPoster","alt","API_KEY","BASE_URL","fetchMovie","url","fetch","response","ok","json","Promise","reject","Error","getTrendingMovie","searchMovies","query","page","getMovieDetails","getMovieCredits","getMovieReviews","HomePage","useState","setMovies","useEffect","then","results"],"sourceRoot":""}